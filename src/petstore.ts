/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Pet Store Service
 * This is a pet store service.
 * OpenAPI spec version: 0.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
export type PetKind = (typeof PetKind)[keyof typeof PetKind];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PetKind = {
  dog: "dog",
  cat: "cat",
  fish: "fish",
} as const;

export interface Pet {
  /**
   * @minimum 0
   * @maximum 100
   */
  age: number;
  kind: PetKind;
  /** @minLength 100 */
  name: string;
}

export const petsList = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Pet[]>> => {
  return axios.default.get(`/pets`, options);
};

export const getPetsListQueryKey = () => {
  return [`/pets`] as const;
};

export const getPetsListQueryOptions = <
  TData = Awaited<ReturnType<typeof petsList>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof petsList>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPetsListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof petsList>>> = ({
    signal,
  }) => petsList({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof petsList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type PetsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof petsList>>
>;
export type PetsListQueryError = AxiosError<unknown>;

export const usePetsList = <
  TData = Awaited<ReturnType<typeof petsList>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof petsList>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getPetsListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getPetsListResponseMock = (): Pet[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    age: faker.number.int({ min: 0, max: 100 }),
    kind: faker.helpers.arrayElement(["dog", "cat", "fish"] as const),
    name: faker.word.sample(),
  }));

export const getPetsListMockHandler = (
  overrideResponse?:
    | Pet[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Pet[]> | Pet[]),
) => {
  return http.get("*/pets", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPetsListResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};
export const getPetStoreServiceMock = () => [getPetsListMockHandler()];
